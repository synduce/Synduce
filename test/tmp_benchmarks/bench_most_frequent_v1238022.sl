(set-logic LIA)
(synth-fun int_succ ((x71 Int)) Int ((Ix Int) (Ic Int) (Ipred Bool))
 ((Ix Int (Ic x71 (- Ix) (+ Ix Ix) (ite Ipred Ix Ix))) (Ic Int ((Constant Int)))
  (Ipred Bool ((= Ix Ix) (> Ix Ix) (not Ipred) (and Ipred Ipred) (or Ipred Ipred)))))
(synth-fun int_base () Int)
(synth-fun s0$0 ((x72 Int) (x73 Int)) Int ((Ix Int) (Ic Int) (Ipred Bool))
 ((Ix Int (Ic x72 x73 (- Ix) (+ Ix Ix) (ite Ipred Ix Ix))) (Ic Int ((Constant Int)))
  (Ipred Bool ((= Ix Ix) (> Ix Ix) (not Ipred) (and Ipred Ipred) (or Ipred Ipred)))))
(synth-fun s0$1 ((x74 Int) (x75 Int)) Int ((Ix Int) (Ic Int) (Ipred Bool))
 ((Ix Int (Ic x74 x75 (- Ix) (+ Ix Ix) (ite Ipred Ix Ix))) (Ic Int ((Constant Int)))
  (Ipred Bool ((= Ix Ix) (> Ix Ix) (not Ipred) (and Ipred Ipred) (or Ipred Ipred)))))
(declare-var i4 Int)
(declare-var i2 Int)
(declare-var i Int)
(declare-var i0 Int)
(constraint (or (not true) (= 1 (s0$0 i0 int_base))))
(constraint (or (not true) (= i0 (s0$1 i0 int_base))))
(constraint (or (not true) (= 2 (s0$0 i0 (int_succ int_base)))))
(constraint (or (not true) (= i0 (s0$1 i0 (int_succ int_base)))))
(constraint (or (not true) (= 3 (s0$0 i0 (int_succ (int_succ int_base))))))
(constraint (or (not true) (= i0 (s0$1 i0 (int_succ (int_succ int_base))))))
(constraint
 (or (not (and (< i4 i) (and (<= i i2) (and true true))))
  (= (ite (> (+ (ite (= i4 i2) 1 0) 1) 1) (+ (ite (= i4 i2) 1 0) 1) 1) (ite (= i4 i2) 2 1))))
(constraint
 (or (not (and (< i4 i) (and (<= i i2) (and true true))))
  (= (ite (> (+ (ite (= i4 i2) 1 0) 1) 1) i2 i4) (ite (= i4 i2) i2 i4))))
(check-synth)
