(set-logic LIA)
(synth-fun int_succ ((x81 Int)) Int ((Ix Int) (Ic Int) (Ipred Bool))
 ((Ix Int (Ic x81 (- Ix) (+ Ix Ix) (ite Ipred Ix Ix))) (Ic Int ((Constant Int)))
  (Ipred Bool ((= Ix Ix) (> Ix Ix) (not Ipred) (and Ipred Ipred) (or Ipred Ipred)))))
(synth-fun s0$0 ((x82 Int) (x83 Int)) Int ((Ix Int) (Ic Int) (Ipred Bool))
 ((Ix Int (Ic x82 x83 (- Ix) (+ Ix Ix) (ite Ipred Ix Ix))) (Ic Int ((Constant Int)))
  (Ipred Bool ((= Ix Ix) (> Ix Ix) (not Ipred) (and Ipred Ipred) (or Ipred Ipred)))))
(synth-fun s0$1 ((x84 Int) (x85 Int)) Int ((Ix Int) (Ic Int) (Ipred Bool))
 ((Ix Int (Ic x84 x85 (- Ix) (+ Ix Ix) (ite Ipred Ix Ix))) (Ic Int ((Constant Int)))
  (Ipred Bool ((= Ix Ix) (> Ix Ix) (not Ipred) (and Ipred Ipred) (or Ipred Ipred)))))
(declare-var i4 Int)
(declare-var i2 Int)
(declare-var i Int)
(declare-var i0 Int)
(constraint (or (not true) (= 1 (s0$0 i0 0))))
(constraint (or (not true) (= i0 (s0$1 i0 0))))
(constraint (or (not true) (= 2 (s0$0 i0 (int_succ 0)))))
(constraint (or (not true) (= i0 (s0$1 i0 (int_succ 0)))))
(constraint (or (not true) (= 3 (s0$0 i0 (int_succ (int_succ 0))))))
(constraint (or (not true) (= i0 (s0$1 i0 (int_succ (int_succ 0))))))
(constraint
 (or (not (and (< i4 i) (and (<= i i2) (and true true))))
  (= (ite (> (+ (ite (= i4 i2) 1 0) 1) 1) (+ (ite (= i4 i2) 1 0) 1) 1) (ite (= i4 i2) 2 1))))
(constraint
 (or (not (and (< i4 i) (and (<= i i2) (and true true))))
  (= (ite (> (+ (ite (= i4 i2) 1 0) 1) 1) i2 i4) (ite (= i4 i2) i2 i4))))
(check-synth)
